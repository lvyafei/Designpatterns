<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>Java之命令模式（Command Pattern） - Devin Zhang - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=vVKakOZtmmmI9PttuB8cajJQIPwEqvGelvnOjnc3uik1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/sea/bundle-sea.css?v=PPe3jt1rcXPno6kucw0iQU2MWF3DbrvubQHRM0FEMas1"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/devinzhang/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/devinzhang/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/devinzhang/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'devinzhang', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=5SljHjvFayhSwYEpPGn3hGjzMUiUy8_LhBNYFY8TdeA1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="header">
	
<!--done-->
<div class="header">
	<div class="headerText">
		<a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/devinzhang/">Devin Zhang</a><br>
		
	</div>
</div>

</div>

<div id="mytopmenu" >
	
		<div id="mylinks">
<!--done-->
<a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a> &nbsp;
<a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/devinzhang/">首页</a> &nbsp;
<a href="http://q.cnblogs.com" class="menu">博问</a> &nbsp;
<a href="http://home.cnblogs.com/ing/" class="menu">闪存</a> &nbsp;
<a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a> &nbsp;
<a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/Devin+Zhang">联系</a> &nbsp;
<a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/devinzhang/rss">订阅</a><a id="MyLinks1_XMLLink" href="http://www.cnblogs.com/devinzhang/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>&nbsp;
<a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a>
</div>
		<DIV id="mystats">
<!--done-->
随笔-120&nbsp;
评论-155&nbsp;
文章-0&nbsp;
trackbacks-0
</DIV>
	
</div>
<div id="centercontent" >
	

<div class = "post">
	<h1 class = "postTitle"><a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/devinzhang/archive/2012/01/06/2315235.html">Java之命令模式（Command Pattern）</a></h1>
	<div id="cnblogs_post_body"><p>1.概念</p>
<p>　　将来自客户端的请求传入一个对象，从而使你可用不同的请求对客户进行参数化。用于&ldquo;行为请求者&rdquo;与&ldquo;行为实现者&rdquo;解耦，可实现二者之间的松耦合，以便适应变化。分离变化与不变的因素。</p>
<p>&nbsp;　　在面向对象的程序设计中，一个对象调用另一个对象，一般情况下的调用过程是：创建目标对象实例；设置调用参数；调用目标对象的方法。</p>
<p>但在有些情况下有必要使用一个专门的类对这种调用过程加以封装，我们把这种专门的类称作command类。</p>
<p>Command模式可应用于<br /> a）整个调用过程比较繁杂，或者存在多处这种调用。这时，使用Command类对该调用加以封装，便于功能的再利用。<br /> b）调用前后需要对调用参数进行某些处理。<br /> c）调用前后需要进行某些额外处理，比如日志，缓存，记录历史操作等。</p>
<p>Command模式有如下效果：<br /> a）将调用操作的对象和知道如何实现该操作的对象解耦。<br /> b）Command是头等对象。他们可以像其他对象一样被操作和扩展。<br /> c）你可将多个命令装配成一个符合命令。<br /> d）增加新的Command很容易，因为这无需改变现有的类。</p>
<p>&nbsp;</p>
<p>2.UML</p>
<p><img src="http://pic002.cnblogs.com/images/2012/267603/2012010622255792.jpg" alt="" /></p>
<p>3.代码</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> Command {<br />    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> execute();<br />}<br /><br /><br /><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> ConcreteCommand <span style="color: #0000ff;">implements</span> Command {<br /><br />    <span style="color: #0000ff;">private</span> Receiver receiver = <span style="color: #0000ff;">null</span>;<br />    <span style="color: #0000ff;">private</span> String state;<br /><br />    <span style="color: #0000ff;">public</span> ConcreteCommand(Receiver receiver){<br />       <span style="color: #0000ff;">this</span>.receiver = receiver;<br />    }  <br />    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> execute() {<br />       receiver.action();<br />    }<br />}<br /><br /><br /><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Receiver {<br />    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> action(){<br />       <span style="color: #008000;">//</span><span style="color: #008000;">真正执行命令操作的功能代码</span><span style="color: #008000;"><br /></span>    }<br />}<br /><br /><br /><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Invoker {<br />    <span style="color: #0000ff;">private</span> Command command = <span style="color: #0000ff;">null</span>;<br /><br />    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setCommand(Command command) {<br />       <span style="color: #0000ff;">this</span>.command = command;<br />    }<br /><br />    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> runCommand() {<br />       command.execute();<br />    }<br />}<br /><br /><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Client {<br />    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> assemble(){<br />       <span style="color: #008000;">//</span><span style="color: #008000;">创建接收者</span><span style="color: #008000;"><br /></span>       Receiver receiver = <span style="color: #0000ff;">new</span> Receiver();<br />       <span style="color: #008000;">//</span><span style="color: #008000;">创建命令对象，设定它的接收者</span><span style="color: #008000;"><br /></span>       Command command = <span style="color: #0000ff;">new</span> ConcreteCommand(receiver);<br />       <span style="color: #008000;">//</span><span style="color: #008000;">创建Invoker，把命令对象设置进去</span><span style="color: #008000;"><br /></span>       Invoker invoker = <span style="color: #0000ff;">new</span> Invoker();<br />       invoker.setCommand(command);<br />    }<br />}</pre>
</div>
<div class="cnblogs_code">
<pre>下面给个例子，是模拟对电视机的操作有开机、关机、换台命令。代码如下<br /><br /><span style="color: #008000;">//</span><span style="color: #008000;">命令接收者</span><span style="color: #008000;"><br /></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Tv {<br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">int</span> currentChannel = 0;<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> turnOn() {<br />　　   System.out.println("The televisino is on.");<br />　　}<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> turnOff() {<br />　　   System.out.println("The television is off.");<br />　　}<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> changeChannel(<span style="color: #0000ff;">int</span> channel) {<br />　　   <span style="color: #0000ff;">this</span>.currentChannel = channel;<br />　　   System.out.println("Now TV channel is " + channel);<br />　　}<br />}<br /><br /><span style="color: #008000;">//</span><span style="color: #008000;">执行命令的接口</span><span style="color: #008000;"><br /></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> Command {<br /><span style="color: #0000ff;">　　void</span> execute();<br />}<br /><br /><span style="color: #008000;">//</span><span style="color: #008000;">开机命令</span><span style="color: #008000;"><br /></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CommandOn <span style="color: #0000ff;">implements</span> Command {<br /><span style="color: #0000ff;">　　private</span> Tv myTv;<br /><br /><span style="color: #0000ff;">　　public</span> CommandOn(Tv tv) {<br />　　   myTv = tv;<br />　　}<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> execute() {<br />　　   myTv.turnOn();<br />　　}<br />}<br /><br /><span style="color: #008000;">//</span><span style="color: #008000;">关机命令</span><span style="color: #008000;"><br /></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CommandOff <span style="color: #0000ff;">implements</span> Command {<br /><span style="color: #0000ff;">　　private</span> Tv myTv;<br /><br /><span style="color: #0000ff;">　　public</span> CommandOff(Tv tv) {<br />　　   myTv = tv;<br />　　}<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> execute() {<br />　　   myTv.turnOff();<br />　　}<br />}<br /><br /><span style="color: #008000;">//</span><span style="color: #008000;">频道切换命令</span><span style="color: #008000;"><br /></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CommandChange <span style="color: #0000ff;">implements</span> Command {<br /><span style="color: #0000ff;">　　private</span> Tv myTv;<br /><br /><span style="color: #0000ff;">　　private</span> <span style="color: #0000ff;">int</span> channel;<br /><br /><span style="color: #0000ff;">　　public</span> CommandChange(Tv tv, <span style="color: #0000ff;">int</span> channel) {<br />　　   myTv = tv;<br /> 　　  <span style="color: #0000ff;">this</span>.channel = channel;<br />　　}<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> execute() {<br />　　   myTv.changeChannel(channel);<br />　　}<br />}<br /><br /><span style="color: #008000;">//</span><span style="color: #008000;">可以看作是遥控器吧</span><span style="color: #008000;"><br /></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Control {<br /><span style="color: #0000ff;">　　private</span> Command onCommand, offCommand, changeChannel;<br /><br /><span style="color: #0000ff;">　　public</span> Control(Command on, Command off, Command channel) {<br /> 　　  onCommand = on;<br /> 　　  offCommand = off;<br />　　   changeChannel = channel;<br />　　}<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> turnOn() {<br />　　   onCommand.execute();<br />　　}<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> turnOff() {<br />　　   offCommand.execute();<br />　　}<br /><br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">void</span> changeChannel() {<br /> 　　  changeChannel.execute();<br />　　}<br />}<br /><br /><span style="color: #008000;">//</span><span style="color: #008000;">测试类</span><span style="color: #008000;"><br /></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Client {<br /><span style="color: #0000ff;">　　public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> main(String[] args) {<br />  　　 <span style="color: #008000;">//</span><span style="color: #008000;"> 命令接收者</span><span style="color: #008000;"><br /></span> 　　  Tv myTv = <span style="color: #0000ff;">new</span> Tv();<br /> 　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 开机命令</span><span style="color: #008000;"><br /></span>  　　 CommandOn on = <span style="color: #0000ff;">new</span> CommandOn(myTv);<br />  　　 <span style="color: #008000;">//</span><span style="color: #008000;"> 关机命令</span><span style="color: #008000;"><br /></span>  　　 CommandOff off = <span style="color: #0000ff;">new</span> CommandOff(myTv);<br />  　　 <span style="color: #008000;">//</span><span style="color: #008000;"> 频道切换命令</span><span style="color: #008000;"><br /></span> 　　  CommandChange channel = <span style="color: #0000ff;">new</span> CommandChange(myTv, 2);<br /> 　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 命令控制对象</span><span style="color: #008000;"><br /></span>　　   Control control = <span style="color: #0000ff;">new</span> Control(on, off, channel);<br /><br />  　　 <span style="color: #008000;">//</span><span style="color: #008000;"> 开机</span><span style="color: #008000;"><br /></span>  　　 control.turnOn();<br /> 　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 切换频道</span><span style="color: #008000;"><br /></span> 　　  control.changeChannel();<br /> 　　  <span style="color: #008000;">//</span><span style="color: #008000;"> 关机</span><span style="color: #008000;"><br /></span> 　　  control.turnOff();<br />　　}<br />}<br /><br /><br />执行结果为：<br />The televisino is on.<br />Now TV channel is 2<br />The television is off.</pre>
</div>
<p>4.应用场景</p>
<p>在下面的情况下应当考虑使用命令模式：</p>
<p>1）使用命令模式作为"CallBack"在面向对象系统中的替代。"CallBack"讲的便是先将一个函数登记上，然后在以后调用此函数。</p>
<p>2）需要在不同的时间指定请求、将请求排队。一个命令对象和原先的请求发出者可以有不同的生命期。换言之，原先的请求发出者可能已经不在了，而命令对象本身仍然是活动的。这时命令的接收者可以是在本地，也可以在网络的另外一个地址。命令对象可以在串形化之后传送到另外一台机器上去。</p>
<p>3）系统需要支持命令的撤消(undo)。命令对象可以把状态存储起来，等到客户端需要撤销命令所产生的效果时，可以调用undo()方法，把命令所产生的效果撤销掉。命令对象还可以提供redo()方法，以供客户端在需要时，再重新实施命令效果。</p>
<p>4）如果一个系统要将系统中所有的数据更新到日志里，以便在系统崩溃时，可以根据日志里读回所有的数据更新命令，重新调用Execute()方法一条一条执行这些命令，从而恢复系统在崩溃前所做的数据更新。</p>
<p><br /><br /></p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


	<div class = "postDesc">posted on <span id="post-date">2012-01-06 22:29</span> <a href='http://www.cnblogs.com/devinzhang/'>Devin Zhang</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=2315235" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(2315235);return false;">收藏</a></div>
</div>
<script type="text/javascript">var allowComments=true,isLogined=true,cb_blogId=104312,cb_entryId=2315235,cb_blogApp=currentBlogApp,cb_blogUserGuid='65ff1fe1-c126-e011-ac81-842b2b196315',cb_entryCreatedDate='2012/1/6 22:29:00';loadViewCount(cb_entryId);</script>

<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = true;var googletag = googletag || {};googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
</script>
<div id="ad_under_post_holder">
<script type='text/javascript'>
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') +'//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
    })();
</script>
<script type='text/javascript'>
    try {
        googletag.cmd.push(function () {
            googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'>
    <script type='text/javascript'>
    try{
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });
    } catch (e) { }
    </script>
    </div>
</div>
</div>
<div id="blog_news_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    $.ajax({ url: 'http://counter.cnblogs.com/blog/post/' + cb_entryId, type: 'get', dataType: 'script', cache: true });
});
</script>
</div>

</div>
<div id="leftcontent">
	
		<DIV id="leftcontentcontainer">
			
<!--done-->
<div class="newsItem">
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script><br>
			<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script></DIV>
	
</div>

<!--done-->
<div class="footer">
	Powered by: <a href="http://www.cnblogs.com">博客园</a>	模板提供：<a href="http://blog.hjenglish.com">沪江博客</a>
	Copyright &copy;2014 Devin Zhang
</div>



</body>
</html>
