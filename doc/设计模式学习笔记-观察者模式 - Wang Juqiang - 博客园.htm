<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>设计模式学习笔记-观察者模式 - Wang Juqiang - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=vVKakOZtmmmI9PttuB8cajJQIPwEqvGelvnOjnc3uik1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/SimpleBlue/bundle-SimpleBlue.css?v=g1Ly_5CnmgosFgcSP2WTmRocMrlS6IO9yhcnMXW9dOA1"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/wangjq/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/wangjq/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/wangjq/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'wangjq', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=jvJZmSCHVKCE2JBQ2Jnh-ulNTcIvLVKFiU_ws2zCGYs1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<div id="home">
<div id="header">
	<div id="blogTitle">
		
<!--done-->
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/wangjq/">老聚</a></div>
<div class="subtitle">王聚强</div>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li id="nav_sitehome"><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li id="nav_myhome"><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/wangjq/">首页</a></li>
<li id="nav_q"><a class="menu" href="http://q.cnblogs.com/">博问</a></li>
<li id="nav_ing"><a class="menu" href="http://home.cnblogs.com/ing/">闪存</a></li>
<li id="nav_newpost"><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li id="nav_contact"><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/Wang+Juqiang">联系</a></li>
<li id="nav_rss"><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/wangjq/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/wangjq/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li id="nav_admin"><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>

		<div class="blogStats">
			
			
<!--done-->
随笔-35&nbsp;
文章-0&nbsp;
评论-79&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		

<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/wangjq/archive/2012/07/12/2587966.html">设计模式学习笔记-观察者模式</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p>1. 概述</p>
<p>　　有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>
<p>2. 解决的问题</p>
<p>　　将一个系统分割成一个一些类相互协作的类有一个不好的副作用，那就是需要维护相关对象间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。观察者就是解决这类的耦合关系的。</p>
<p>3. 模式中的角色</p>
<p>　　3.1 抽象主题（Subject）：它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</p>
<p>　　3.2 具体主题（ConcreteSubject）：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。</p>
<p>　　3.3 抽象观察者（Observer）：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</p>
<p>　　3.4 具体观察者（ConcreteObserver）：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。</p>
<p>4. 模式解读</p>
<p>　　4.1&nbsp;观察者模式的类图　　</p>
<p>　　<img src="http://pic002.cnblogs.com/images/2012/155937/2012071215463875.png" alt="" /></p>
<p>　　4.2&nbsp;观察者模式的代码</p>
<div class="cnblogs_code">
<pre>    <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 抽象主题类
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Subject
    {
        </span><span style="color: #0000ff;">private</span> IList&lt;Observer&gt; observers = <span style="color: #0000ff;">new</span> List&lt;Observer&gt;<span style="color: #000000;">();

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 增加观察者
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="observer"&gt;&lt;/param&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Attach(Observer observer)
        {
            observers.Add(observer);
        }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 移除观察者
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="observer"&gt;&lt;/param&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Detach(Observer observer)
        {
            observers.Remove(observer);
        }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 向观察者（们）发出通知
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Notify()
        {
            </span><span style="color: #0000ff;">foreach</span> (Observer o <span style="color: #0000ff;">in</span><span style="color: #000000;"> observers)
            {
                o.Update();
            }
        }
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 抽象观察者类，为所有具体观察者定义一个接口，在得到通知时更新自己
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Observer
    {
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Update();
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 具体观察者或具体通知者，将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色通常用一个具体子类实现。
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ConcreteSubject : Subject
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> subjectState;

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 具体观察者的状态
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> SubjectState
        {
            </span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span><span style="color: #000000;"> subjectState; }
            </span><span style="color: #0000ff;">set</span> { subjectState =<span style="color: #000000;"> value; }
        }
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 具体观察者，实现抽象观察者角色所要求的更新接口，已是本身状态与主题状态相协调
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ConcreteObserver : Observer
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> observerState;
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> name;
        </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> ConcreteSubject subject;

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 具体观察者用一个具体主题来实现
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span><span style="color: #000000;"> ConcreteSubject Subject
        {
            </span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span><span style="color: #000000;"> subject; }
            </span><span style="color: #0000ff;">set</span> { subject =<span style="color: #000000;"> value; }
        }

        </span><span style="color: #0000ff;">public</span> ConcreteObserver(ConcreteSubject subject, <span style="color: #0000ff;">string</span><span style="color: #000000;"> name)
        {
            </span><span style="color: #0000ff;">this</span>.subject =<span style="color: #000000;"> subject;
            </span><span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
        }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 实现抽象观察者中的更新操作
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Update()
        {
            observerState </span>=<span style="color: #000000;"> subject.SubjectState;
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">The observer's state of {0} is {1}</span><span style="color: #800000;">"</span><span style="color: #000000;">, name, observerState);
        }
    }</span></pre>
</div>
<p>　　4.3&nbsp;客户端代码</p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">class</span><span style="color: #000000;"> Program
    {
        </span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)
        {
            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 具体主题角色通常用具体自来来实现</span>
            ConcreteSubject subject = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ConcreteSubject();

            subject.Attach(</span><span style="color: #0000ff;">new</span> ConcreteObserver(subject, <span style="color: #800000;">"</span><span style="color: #800000;">Observer A</span><span style="color: #800000;">"</span><span style="color: #000000;">));
            subject.Attach(</span><span style="color: #0000ff;">new</span> ConcreteObserver(subject, <span style="color: #800000;">"</span><span style="color: #800000;">Observer B</span><span style="color: #800000;">"</span><span style="color: #000000;">));
            subject.Attach(</span><span style="color: #0000ff;">new</span> ConcreteObserver(subject, <span style="color: #800000;">"</span><span style="color: #800000;">Observer C</span><span style="color: #800000;">"</span><span style="color: #000000;">));

            subject.SubjectState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">Ready</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            subject.Notify();

            Console.Read();
        }
    }</span></pre>
</div>
<p>　　运行结果</p>
<p>　　<img src="http://pic002.cnblogs.com/images/2012/155937/2012071213265288.png" alt="" /></p>
<p>5. 模式总结</p>
<p>　　5.1 优点</p>
<p>　　　　5.1.1 观察者模式解除了主题和具体观察者的耦合，让耦合的双方都依赖于抽象，而不是依赖具体。从而使得各自的变化都不会影响另一边的变化。</p>
<p>　　5.2 缺点</p>
<p>　　　　5.2.1 依赖关系并未完全解除，抽象通知者依旧依赖抽象的观察者。</p>
<p>　　5.3 适用场景</p>
<p>　　　　5.3.1 当一个对象的改变需要给变其它对象时，而且它不知道具体有多少个对象有待改变时。</p>
<p>　　　　5.3.2 一个抽象某型有两个方面，当其中一个方面依赖于另一个方面，这时用观察者模式可以将这两者封装在独立的对象中使它们各自独立地改变和复用。</p>
<p>&nbsp;</p>
<p>6. 模式引申，应用C#中的事件委托来彻底解除通知者和观察者之间的耦合。</p>
<p>　　　6.1 关于委托的定义：委托是一种引用方法的类型。一旦为委托分配了方法，委托将与该方法有相同的行为。委托方法可以像其它任何方法一样，具有参数和返回值。委托可以看作是对函数（方法）的的抽象，是函数的&ldquo;类&rdquo;，委托的实例代表一个（或多个）具体的函数，它可以是多播的。</p>
<p>　　　6.2 关于事件：事件基于委托，为委托提供了一种发布/订阅机制。事件的订阅与取消与我们刚才讲的观察者模式中的订阅与取消类似，只是表现形式有所不同。在观察者模式中，订阅使用方法Attach（）来进行；在事件的订阅中使用&ldquo;+=&rdquo;。类似地，取消订阅在观察者模式中用Dettach（），而事件的取消用&ldquo;-=&rdquo;。</p>
<p>&nbsp;</p>
<p>7. 下面例子分别用观察者模式，事件机制来实现</p>
<p>　　7.1 实例描述：客户支付了订单款项，这时财务需要开具发票，出纳需要记账，配送员需要配货。</p>
<p>　　7.2 观察者模式的实现</p>
<p>　　　　7.2.1 类图</p>
<p>　　　　<img src="http://pic002.cnblogs.com/images/2012/155937/2012071215531341.png" alt="" /></p>
<p>　　　　7.2.2 代码实现</p>
<div class="cnblogs_code">
<pre>    <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 抽象观察者
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> ISubject
    {
        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> Notify();
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 工作岗位，作为这里的观察者的抽象
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> JobStation
    {
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Update();
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 具体主题，这里是客户
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Customer : ISubject
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> customerState;

        </span><span style="color: #0000ff;">private</span> IList&lt;JobStation&gt; observers = <span style="color: #0000ff;">new</span> List&lt;JobStation&gt;<span style="color: #000000;">();

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 增加观察者
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="observer"&gt;&lt;/param&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Attach(JobStation observer)
        {
            </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.observers.Add(observer);
        }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 移除观察者
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="observer"&gt;&lt;/param&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Detach(JobStation observer)
        {
            </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.observers.Remove(observer);
        }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 客户状态
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> CustomerState
        {
            </span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span><span style="color: #000000;"> customerState; }
            </span><span style="color: #0000ff;">set</span> { customerState =<span style="color: #000000;"> value; }
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Notify()
        {
            </span><span style="color: #0000ff;">foreach</span> (JobStation o <span style="color: #0000ff;">in</span><span style="color: #000000;"> observers)
            {
                o.Update();
            }
        }
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 会计
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Accountant : JobStation
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> accountantState;
        </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Customer customer;

        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Accountant(Customer customer)
        {
            </span><span style="color: #0000ff;">this</span>.customer =<span style="color: #000000;"> customer;
        }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 更新状态
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Update()
        {
            </span><span style="color: #0000ff;">if</span> (customer.CustomerState == <span style="color: #800000;">"</span><span style="color: #800000;">已付款</span><span style="color: #800000;">"</span><span style="color: #000000;">)
            {
                Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">我是会计，我来开具发票。</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                accountantState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">已开发票</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            }
        }
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 出纳
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Cashier : JobStation
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> cashierState;
        </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Customer customer;

        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Cashier(Customer customer)
        {
            </span><span style="color: #0000ff;">this</span>.customer =<span style="color: #000000;"> customer;
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Update()
        {
            </span><span style="color: #0000ff;">if</span> (customer.CustomerState == <span style="color: #800000;">"</span><span style="color: #800000;">已付款</span><span style="color: #800000;">"</span><span style="color: #000000;">)
            {
                Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">我是出纳员，我给登记入账。</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                cashierState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">已入账</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            }
        }
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 配送员
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Dilliveryman : JobStation
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> dillivierymanState;
        </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Customer customer;

        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Dilliveryman(Customer customer)
        {
            </span><span style="color: #0000ff;">this</span>.customer =<span style="color: #000000;"> customer;
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Update()
        {
            </span><span style="color: #0000ff;">if</span> (customer.CustomerState == <span style="color: #800000;">"</span><span style="color: #800000;">已付款</span><span style="color: #800000;">"</span><span style="color: #000000;">)
            {
                Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">我是配送员，我来发货。</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                dillivierymanState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">已发货</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            }
        }
    }</span></pre>
</div>
<p>　　　　7.2.3 客户端代码</p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">class</span><span style="color: #000000;"> Program
    {
        </span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)
        {

            Customer subject </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Customer();

            subject.Attach(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Accountant(subject));
            subject.Attach(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Cashier(subject));
            subject.Attach(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Dilliveryman(subject));

            subject.CustomerState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">已付款</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            subject.Notify();

            Console.Read();
        }
    }</span></pre>
</div>
<p>　　　　运行结果：</p>
<p>　　　　<span style="background-color: #00ffff;">我是会计，我来开具发票。</span><br />　　　　<span style="background-color: #00ffff;">我是出纳员，我给登记入账。</span><br />　　　　<span style="background-color: #00ffff;">我是配送员，我来发货。</span></p>
<p>&nbsp;</p>
<p>　　7.3 事件实现</p>
<p>　　　　7.3.1 类图</p>
<p>　　　　<img src="http://pic002.cnblogs.com/images/2012/155937/2012071216194626.png" alt="" /></p>
<p>　　　　通过类图来看，观察者和主题之间已经不存在任何依赖关系了。</p>
<p>　　　　7.3.2 代码实现</p>
<p>　　　　</p>
<div class="cnblogs_code">
<pre>    <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 抽象主题
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> ISubject
    {
        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> Notify();
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 声明委托
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">delegate</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> CustomerEventHandler();

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 具体主题
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Customer : ISubject
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> customerState;

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 声明一个委托事件，类型为 CustomerEventHandler</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">event</span><span style="color: #000000;"> CustomerEventHandler Update;

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Notify()
        {
            </span><span style="color: #0000ff;">if</span> (Update != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
            {
                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 使用事件来通知给订阅者</span>
<span style="color: #000000;">                Update();
            }
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> CustomerState
        {
            </span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span><span style="color: #000000;"> customerState; }
            </span><span style="color: #0000ff;">set</span> { customerState =<span style="color: #000000;"> value; }
        }
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 财务，已经不需要实现抽象的观察者类，并且不用引用具体的主题
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Accountant
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> accountantState;

        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Accountant()
        { }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 开发票
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> GiveInvoice()
        {
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">我是会计，我来开具发票。</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            accountantState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">已开发票</span><span style="color: #800000;">"</span><span style="color: #000000;">;
        }
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 出纳，已经不需要实现抽象的观察者类，并且不用引用具体的主题
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Cashier
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> cashierState;

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Recoded()
        {
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">我是出纳员，我给登记入账。</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            cashierState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">已入账</span><span style="color: #800000;">"</span><span style="color: #000000;">;
        }
    }

    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 配送员，已经不需要实现抽象的观察者类，并且不用引用具体的主题
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Dilliveryman
    {
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> dillivierymanState;

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Dilliver()
        {
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">我是配送员，我来发货。</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            dillivierymanState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">已发货</span><span style="color: #800000;">"</span><span style="color: #000000;">;
        }
    }</span></pre>
</div>
<p>　　　　7.3.3 客户端代码</p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">class</span><span style="color: #000000;"> Program
    {
        </span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)
        {

            Customer subject </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Customer();

            Accountant accountant </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Accountant();
            Cashier cashier </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Cashier();
            Dilliveryman dilliveryman </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Dilliveryman();

            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 注册事件</span>
            subject.Update +=<span style="color: #000000;"> accountant.GiveInvoice;
            subject.Update </span>+=<span style="color: #000000;"> cashier.Recoded;
            subject.Update </span>+=<span style="color: #000000;"> dilliveryman.Dilliver;

            </span><span style="color: #008000;">/*</span><span style="color: #008000;">
             * 以上写法也可以用下面代码来替换
            subject.Update += new CustomerEventHandler(accountant.GiveInvoice);
            subject.Update += new CustomerEventHandler(cashier.Recoded);
            subject.Update += new CustomerEventHandler(dilliveryman.Dilliver);
             </span><span style="color: #008000;">*/</span><span style="color: #000000;">

            subject.CustomerState </span>= <span style="color: #800000;">"</span><span style="color: #800000;">已付款</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            subject.Notify();

            Console.Read();
        }
    }</span></pre>
</div>
<p>　　　　运行结果</p>
<p><span>　　　　<span style="background-color: #00ffff;">我是会计，我来开具发票。</span></span><br />　　　　<span style="background-color: #00ffff;">我是出纳员，我给登记入账。</span><br />　　　　<span style="background-color: #00ffff;">我是配送员，我来发货。</span></p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2012-07-12 16:24</span> <a href='http://www.cnblogs.com/wangjq/'>Wang Juqiang</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=2587966" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(2587966);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=true,cb_blogId=75204,cb_entryId=2587966,cb_blogApp=currentBlogApp,cb_blogUserGuid='166c21fc-1bb4-df11-ac81-842b2b196315',cb_entryCreatedDate='2012/7/12 16:24:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = true;var googletag = googletag || {};googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
</script>
<div id="ad_under_post_holder">
<script type='text/javascript'>
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') +'//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
    })();
</script>
<script type='text/javascript'>
    try {
        googletag.cmd.push(function () {
            googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'>
    <script type='text/javascript'>
    try{
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });
    } catch (e) { }
    </script>
    </div>
</div>
</div>
<div id="blog_news_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    $.ajax({ url: 'http://counter.cnblogs.com/blog/post/' + cb_entryId, type: 'get', dataType: 'script', cache: true });
});
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script></div>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2014 Wang Juqiang
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
</body>
</html>
